// automatically generated by the FlatBuffers compiler, do not modify


pub mod e_r_c_2_0 {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;
pub mod sample {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum BalanceOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Balance<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Balance<'a> {
    type Inner = Balance<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Balance<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Balance {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args BalanceArgs<'args>) -> flatbuffers::WIPOffset<Balance<'bldr>> {
      let mut builder = BalanceBuilder::new(_fbb);
      builder.add_tokens(args.tokens);
      if let Some(x) = args.address { builder.add_address(x); }
      builder.finish()
    }

    pub const VT_ADDRESS: flatbuffers::VOffsetT = 4;
    pub const VT_TOKENS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn address(&'a self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Balance::VT_ADDRESS, None)
  }
  #[inline]
  pub fn tokens(&'a self) -> u64 {
    self._tab.get::<u64>(Balance::VT_TOKENS, Some(0)).unwrap()
  }
}

pub struct BalanceArgs<'a> {
    pub address: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub tokens: u64,
}
impl<'a> Default for BalanceArgs<'a> {
    #[inline]
    fn default() -> Self {
        BalanceArgs {
            address: None,
            tokens: 0,
        }
    }
}
pub struct BalanceBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BalanceBuilder<'a, 'b> {
  #[inline]
  pub fn add_address(&mut self, address: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Balance::VT_ADDRESS, address);
  }
  #[inline]
  pub fn add_tokens(&mut self, tokens: u64) {
    self.fbb_.push_slot::<u64>(Balance::VT_TOKENS, tokens, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BalanceBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BalanceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Balance<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum AllowedOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Allowed<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Allowed<'a> {
    type Inner = Allowed<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Allowed<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Allowed {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args AllowedArgs<'args>) -> flatbuffers::WIPOffset<Allowed<'bldr>> {
      let mut builder = AllowedBuilder::new(_fbb);
      builder.add_tokens(args.tokens);
      if let Some(x) = args.spender { builder.add_spender(x); }
      if let Some(x) = args.address { builder.add_address(x); }
      builder.finish()
    }

    pub const VT_ADDRESS: flatbuffers::VOffsetT = 4;
    pub const VT_SPENDER: flatbuffers::VOffsetT = 6;
    pub const VT_TOKENS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn address(&'a self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Allowed::VT_ADDRESS, None)
  }
  #[inline]
  pub fn spender(&'a self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Allowed::VT_SPENDER, None)
  }
  #[inline]
  pub fn tokens(&'a self) -> u64 {
    self._tab.get::<u64>(Allowed::VT_TOKENS, Some(0)).unwrap()
  }
}

pub struct AllowedArgs<'a> {
    pub address: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub spender: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub tokens: u64,
}
impl<'a> Default for AllowedArgs<'a> {
    #[inline]
    fn default() -> Self {
        AllowedArgs {
            address: None,
            spender: None,
            tokens: 0,
        }
    }
}
pub struct AllowedBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AllowedBuilder<'a, 'b> {
  #[inline]
  pub fn add_address(&mut self, address: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Allowed::VT_ADDRESS, address);
  }
  #[inline]
  pub fn add_spender(&mut self, spender: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Allowed::VT_SPENDER, spender);
  }
  #[inline]
  pub fn add_tokens(&mut self, tokens: u64) {
    self.fbb_.push_slot::<u64>(Allowed::VT_TOKENS, tokens, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AllowedBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AllowedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Allowed<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum DataOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Data<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Data<'a> {
    type Inner = Data<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Data<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Data {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args DataArgs<'args>) -> flatbuffers::WIPOffset<Data<'bldr>> {
      let mut builder = DataBuilder::new(_fbb);
      builder.add_total_supply(args.total_supply);
      if let Some(x) = args.new_owner { builder.add_new_owner(x); }
      if let Some(x) = args.owner { builder.add_owner(x); }
      if let Some(x) = args.allowed { builder.add_allowed(x); }
      if let Some(x) = args.balances { builder.add_balances(x); }
      builder.finish()
    }

    pub const VT_BALANCES: flatbuffers::VOffsetT = 4;
    pub const VT_ALLOWED: flatbuffers::VOffsetT = 6;
    pub const VT_OWNER: flatbuffers::VOffsetT = 8;
    pub const VT_NEW_OWNER: flatbuffers::VOffsetT = 10;
    pub const VT_TOTAL_SUPPLY: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn balances(&'a self) -> Option<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Balance<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Balance<'a>>>>>(Data::VT_BALANCES, None)
  }
  #[inline]
  pub fn allowed(&'a self) -> Option<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Allowed<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<flatbuffers::ForwardsUOffset<Allowed<'a>>>>>(Data::VT_ALLOWED, None)
  }
  #[inline]
  pub fn owner(&'a self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Data::VT_OWNER, None)
  }
  #[inline]
  pub fn new_owner(&'a self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Data::VT_NEW_OWNER, None)
  }
  #[inline]
  pub fn total_supply(&'a self) -> u64 {
    self._tab.get::<u64>(Data::VT_TOTAL_SUPPLY, Some(0)).unwrap()
  }
}

pub struct DataArgs<'a> {
    pub balances: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Balance<'a >>>>>,
    pub allowed: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , flatbuffers::ForwardsUOffset<Allowed<'a >>>>>,
    pub owner: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub new_owner: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub total_supply: u64,
}
impl<'a> Default for DataArgs<'a> {
    #[inline]
    fn default() -> Self {
        DataArgs {
            balances: None,
            allowed: None,
            owner: None,
            new_owner: None,
            total_supply: 0,
        }
    }
}
pub struct DataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DataBuilder<'a, 'b> {
  #[inline]
  pub fn add_balances(&mut self, balances: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Balance<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Data::VT_BALANCES, balances);
  }
  #[inline]
  pub fn add_allowed(&mut self, allowed: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Allowed<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Data::VT_ALLOWED, allowed);
  }
  #[inline]
  pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Data::VT_OWNER, owner);
  }
  #[inline]
  pub fn add_new_owner(&mut self, new_owner: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Data::VT_NEW_OWNER, new_owner);
  }
  #[inline]
  pub fn add_total_supply(&mut self, total_supply: u64) {
    self.fbb_.push_slot::<u64>(Data::VT_TOTAL_SUPPLY, total_supply, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Data<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_data<'a>(buf: &'a [u8]) -> Data<'a> {
  flatbuffers::get_root::<Data<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_data<'a>(buf: &'a [u8]) -> Data<'a> {
  flatbuffers::get_size_prefixed_root::<Data<'a>>(buf)
}

#[inline]
pub fn finish_data_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Data<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_data_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Data<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Sample
}  // pub mod ERC20

